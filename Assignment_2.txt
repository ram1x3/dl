import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import random

# Load MNIST data and split into training and testing sets
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize pixel values to be between 0 and 1
x_train = x_train / 255.0
x_test= x_test / 255.0


#Define the network architecture using keras
model = keras.Sequential([
    keras.layers.Flatten(input_shape = (28,28)),
    keras.layers.Dense(128, activation ="relu"),
    keras.layers.Dense(10, activation ="softmax"),
])
model.summary()

# Train the model using SGD

model.compile(optimizer="sgd",loss="sparse_categorical_crossentropy",metrics=['accuracy'])

history = model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=5)

# Evaluate Network 
test_loss,test_acc = model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f"%test_acc)

n = random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()
predicted_value = model.predict(x_test)
plt.imshow(x_test[n])
plt.show()

print("Predicted value:",predicted_value[n])



# Plot the training loss and accuracy:-
# plotting the training accuracy

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("model accuracy")
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train','Validation'], loc= 'upper right')
plt.show()
