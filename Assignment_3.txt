# Step 1 - Loading Dataset

from tensorflow.keras.datasets import mnist

#For Visualization
import matplotlib.pyplot as plt

#Split dataset into training and testing sets
#load_data() automatically splits dataset into training and testing
(x_train,y_train),(x_test,y_test) = mnist.load_data()

x_train.shape #60,000 training examples

x_test.shape

x_train[:5]

#Displaying some numbers
for i in range(9):
    plt.subplot(330+1+i)
    plt.imshow(x_train[i])
plt.show()

# Step 2 - Building a model

#[When a feature is present only that bit is set to 1 rest all 0] ---> One hot encoding
from tensorflow.keras.utils import to_categorical
y_train = to_categorical(y_train)

y_train[:5]
#First line in y_train represents 5 as '1' is present in position 5

#Do same for test data
y_test = to_categorical(y_test)

#Defining model for CNN
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Dense, Flatten,MaxPooling2D
from tensorflow.keras.optimizers import SGD
def define_model():
    model = Sequential()
    model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer="he_uniform",input_shape=(28,28,1)))
    model.add(MaxPooling2D(2,2))
    model.add(Flatten())
    model.add(Dense(100,activation='relu',kernel_initializer="he_uniform"))
    model.add(Dense(10,activation='softmax'))
    opt = SGD(momentum=0.9)
    model.compile(optimizer=opt,loss='CategoricalCrossentropy',metrics=['accuracy'])
    return model

x_train.shape[0],28,28,1

x_train = x_train.reshape((x_train.shape[0],28,28,1))

x_test = x_test.reshape((x_test.shape[0],28,28,1))

#For normalization
x_train = x_train/255.0
x_test = x_test/255.0

model = define_model()

H = model.fit(x_train,y_train,epochs=10,batch_size=32)

y_output = model.predict(x_test)

import random
index = random.randint(1,10000)
plt.imshow(x_test[index])

pred_num = max(y_output[index])
for i in range(len(y_output[index])):
    if(y_output[index][i] == pred_num):
        print("Predicted number is: ",i)
        break

import pandas as pd
pd.DataFrame(H.history).plot(figsize=(9,5))
plt.show()
