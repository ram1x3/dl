# IMPORTING REQUIRED PACKAGES - >
import tensorflow as tf
import matplotlib. pyplot as plt
from keras.models import Sequential
from keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Dropout
import numpy as np

# a) LOADING AND PRE-PROCESSING THE IMAGE DATA
mnist = tf. keras. datasets. mnist
(x_train,y_train), (x_test,y_test)= mnist.load_data()
input_shape =(28, 28, 1)

# making sure that the values are float so that we can get
x_train = x_train.reshape(x_train.shape[0],28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

# Normalizing the RGB codes by dividing it to the max RGB value;
x_train = x_train / 255
x_test = x_test / 255
print( "Shape of Training: ",x_train.shape)
print( "Shape of Testing : ",x_test.shape)

# b) DEFINING THE MODEL's ARCHITECTURE ->

model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2,2)))
model. add (Flatten())
model.add(Dense(200,activation = "relu")) 
model. add (Dropout (0.3))
model.add(Dense(10,activation = "softmax"))

model.summary ()

# c) TRAINING THE MODEL
model.compile(optimizer = 'adam',loss= 'sparse_categorical_crossentropy',metrics=['accuracy'])
history=model.fit(x_train,y_train,epochs = 2)

# d) ESTIMATING THE MODEL's PERFORMANCE->

test_loss, test_acc = model.evaluate(x_test, y_test)
print( "Loss=%.3f" %test_loss)
print( "Accuracy=%.3f" %test_acc)



# Predicting the class of image:
import random
index = random.randint(1,10000)
plt.imshow(x_test[index])
